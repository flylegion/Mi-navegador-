def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android { ndkVersion rootProject.ext.ndkVersion buildToolsVersion rootProject.ext.buildToolsVersion compileSdk rootProject.ext.compileSdkVersion

namespace 'com.williamsoscue.expopastel'

defaultConfig {
    applicationId 'com.williamsoscue.expopastel'
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "1.0.0"
}

signingConfigs {
    debug {
        storeFile file('debug.keystore')
        storePassword 'android'
        keyAlias 'androiddebugkey'
        keyPassword 'android'
    }
}

buildTypes {
    debug {
        signingConfig signingConfigs.debug
    }
    release {
        signingConfig signingConfigs.debug
        shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
        minifyEnabled enableProguardInReleaseBuilds
        proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
    }
}

packagingOptions {
    jniLibs {
        useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
    }
}

androidResources {
    ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
}

}

["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop -> def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",").collect { it.trim() }.findAll { it } if (options.size() > 0) { println "android.packagingOptions.$prop += $options (${options.size()})" options.each { android.packagingOptions[prop] += it } } }

dependencies { implementation("com.facebook.react:react-android")

def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true"
def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true"
def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true"

if (isGifEnabled) {
    implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
}

if (isWebpEnabled) {
    implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
    if (isWebpAnimatedEnabled) {
        implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
    }
}

if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
} else {
    implementation jscFlavor
}

implementation 'com.google.android.material:material:1.11.0'

}


